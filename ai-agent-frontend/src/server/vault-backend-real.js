const express = require('express');
const cors = require('cors');
const { ethers } = require('ethers');

const app = express();
const PORT = 3003;

app.use(cors());
app.use(express.json());

console.log('üöÄ Initialisation du serveur Backend Crypto (Vraies fonctions JS)...');

// Configuration du provider
let provider = null;
let signer = null;

// Fonction d'initialisation du provider
async function initializeProvider() {
  try {
    // Configuration du RPC (adaptez selon votre setup Flow/Ethereum)
    const RPC_URL = process.env.RPC_URL || 'https://mainnet.evm.nodes.onflow.org';
    provider = new ethers.JsonRpcProvider(RPC_URL);
    
    // Configuration du wallet pour les transactions
    const PRIVATE_KEY = process.env.PRIVATE_KEY;
    if (!PRIVATE_KEY) {
      console.warn('‚ö†Ô∏è PRIVATE_KEY non d√©finie, mode lecture seule');
      signer = null; // Mode lecture seule
    } else {
      signer = new ethers.Wallet(PRIVATE_KEY, provider);
      console.log('‚úÖ Provider et signer initialis√©s');
      console.log(`üì° RPC URL: ${RPC_URL}`);
      console.log(`üîë Wallet address: ${await signer.getAddress()}`);
    }
    
    // Test de connexion
    const network = await provider.getNetwork();
    console.log(`üåê R√©seau connect√©: ${network.name} (chainId: ${network.chainId})`);
    
  } catch (error) {
    console.error('‚ùå Erreur initialisation provider:', error);
    // Mode fallback sans connexion blockchain
    provider = null;
    signer = null;
  }
}

// Import dynamique de vos fonctions TypeScript via compilation √† la vol√©e
let VaultFunctions = null;

async function loadVaultFunctions() {
  try {
    // Essayer d'importer vos fonctions compil√©es
    // Si ce n'est pas possible, on utilisera les impl√©mentations JS natives
    console.log('üì¶ Tentative de chargement des fonctions VaultInteractor...');
    
    // Pour l'instant, on impl√©mente les fonctions directement en JS
    VaultFunctions = {
      getVaultInfo: async (provider, vaultAddress) => {
        console.log(`üìä R√©cup√©ration infos vault: ${vaultAddress}`);
        
        if (!provider || !ethers.isAddress(vaultAddress)) {
          throw new Error('Provider ou adresse invalide');
        }

        // ABI minimal pour le vault ERC-4626
        const VAULT_ABI = [
          "function name() external view returns (string)",
          "function symbol() external view returns (string)",
          "function decimals() external view returns (uint8)",
          "function asset() external view returns (address)",
          "function totalAssets() external view returns (uint256)",
          "function totalSupply() external view returns (uint256)"
        ];

        // ABI minimal pour l'asset ERC-20
        const ERC20_ABI = [
          "function name() external view returns (string)",
          "function symbol() external view returns (string)",
          "function decimals() external view returns (uint8)"
        ];

        const vault = new ethers.Contract(vaultAddress, VAULT_ABI, provider);
        
        const [name, symbol, decimals, assetAddress, totalAssets, totalSupply] = await Promise.all([
          vault.name(),
          vault.symbol(),
          vault.decimals(),
          vault.asset(),
          vault.totalAssets(),
          vault.totalSupply()
        ]);

        // Informations sur l'asset sous-jacent
        const asset = new ethers.Contract(assetAddress, ERC20_ABI, provider);
        const [assetName, assetSymbol, assetDecimals] = await Promise.all([
          asset.name(),
          asset.symbol(),
          asset.decimals()
        ]);

        return {
          vault: {
            address: vaultAddress,
            name,
            symbol,
            decimals: Number(decimals),
            totalAssets: ethers.formatUnits(totalAssets, assetDecimals),
            totalSupply: ethers.formatUnits(totalSupply, decimals),
            sharePrice: totalSupply > 0 ? Number(totalAssets) / Number(totalSupply) : 0,
            totalAssetsRaw: totalAssets.toString(),
            totalSupplyRaw: totalSupply.toString()
          },
          asset: {
            address: assetAddress,
            name: assetName,
            symbol: assetSymbol,
            decimals: Number(assetDecimals)
          }
        };
      },

      getUserActiveVaults: async (provider, userAddress) => {
        console.log(`üíº R√©cup√©ration portefeuille: ${userAddress}`);
        
        // Pour la simulation, on retourne des donn√©es vides
        // En production, vous pourriez lire depuis un stockage ou scanner la blockchain
        return [
          {
            vaultAddress: '0x1234567890abcdef1234567890abcdef12345678',
            vaultName: 'Test Vault 1',
            vaultSymbol: 'TV1',
            assetAddress: '0xabcdef1234567890abcdef1234567890abcdef12',
            assetSymbol: 'TEST',
            assetDecimals: 18,
            vaultDecimals: 18,
            firstDepositDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
            lastInteractionDate: new Date().toISOString(),
            totalDeposited: '1000.0',
            currentShares: '950.0',
            currentValue: '1050.0'
          }
        ];
      },

      getUserBalances: async (provider, userAddress, vaultAddress, assetAddress, assetDecimals, vaultDecimals) => {
        console.log(`üí∞ V√©rification soldes: ${userAddress} pour vault ${vaultAddress}`);
        
        const VAULT_ABI = [
          "function balanceOf(address owner) external view returns (uint256)"
        ];
        
        const ERC20_ABI = [
          "function balanceOf(address owner) external view returns (uint256)"
        ];

        const vault = new ethers.Contract(vaultAddress, VAULT_ABI, provider);
        const asset = new ethers.Contract(assetAddress, ERC20_ABI, provider);

        const [assetBalance, vaultBalance] = await Promise.all([
          asset.balanceOf(userAddress),
          vault.balanceOf(userAddress)
        ]);

        return {
          assetBalance: ethers.formatUnits(assetBalance, assetDecimals),
          vaultShares: ethers.formatUnits(vaultBalance, vaultDecimals),
          assetBalanceRaw: assetBalance.toString(),
          vaultSharesRaw: vaultBalance.toString()
        };
      },

      depositToVault: async (provider, signer, vaultInfo, userAddress, amountHuman) => {
        console.log(`üè¶ D√©p√¥t dans vault: ${amountHuman} tokens pour ${userAddress}`);
        
        if (!signer) {
          throw new Error('Signer requis pour les transactions');
        }

        const { vaultAddress, assetAddress, decimals } = vaultInfo;

        const VAULT_ABI = [
          "function deposit(uint256 assets, address receiver) external returns (uint256)",
          "function previewDeposit(uint256 assets) external view returns (uint256)",
          "function maxDeposit(address receiver) external view returns (uint256)"
        ];

        const ERC20_ABI = [
          "function approve(address spender, uint256 amount) external returns (bool)",
          "function allowance(address owner, address spender) external view returns (uint256)",
          "function balanceOf(address owner) external view returns (uint256)"
        ];

        const vault = new ethers.Contract(vaultAddress, VAULT_ABI, signer);
        const token = new ethers.Contract(assetAddress, ERC20_ABI, signer);

        const amount = ethers.parseUnits(amountHuman, decimals);

        // V√©rifications pr√©alables
        const [userBalance, maxDeposit, previewShares] = await Promise.all([
          token.balanceOf(userAddress),
          vault.maxDeposit(userAddress),
          vault.previewDeposit(amount)
        ]);

        if (userBalance < amount) {
          throw new Error(`Solde insuffisant. Vous avez ${ethers.formatUnits(userBalance, decimals)} tokens`);
        }

        if (maxDeposit < amount) {
          throw new Error(`D√©p√¥t trop important. Maximum: ${ethers.formatUnits(maxDeposit, decimals)}`);
        }

        // V√©rifier et approuver si n√©cessaire
        const allowance = await token.allowance(userAddress, vaultAddress);
        if (allowance < amount) {
          console.log("Approbation des tokens...");
          const approveTx = await token.approve(vaultAddress, amount);
          await approveTx.wait();
          console.log("Approbation confirm√©e");
        }

        // Effectuer le d√©p√¥t
        console.log("D√©p√¥t en cours...");
        const depositTx = await vault.deposit(amount, userAddress);
        const receipt = await depositTx.wait();
        
        console.log("D√©p√¥t confirm√©:", receipt.hash);
        
        return {
          success: true,
          txHash: receipt.hash,
          expectedShares: ethers.formatUnits(previewShares, 18)
        };
      },

      withdrawFromVault: async (provider, signer, vaultAddress, assetDecimals, userAddress, amountHuman) => {
        console.log(`üí∞ Retrait du vault: ${amountHuman} tokens pour ${userAddress}`);
        
        if (!signer) {
          throw new Error('Signer requis pour les transactions');
        }

        const VAULT_ABI = [
          "function withdraw(uint256 assets, address receiver, address owner) external returns (uint256)",
          "function previewWithdraw(uint256 assets) external view returns (uint256)",
          "function maxWithdraw(address owner) external view returns (uint256)"
        ];

        const vault = new ethers.Contract(vaultAddress, VAULT_ABI, signer);
        const amount = ethers.parseUnits(amountHuman, assetDecimals);

        const [maxWithdraw, previewShares] = await Promise.all([
          vault.maxWithdraw(userAddress),
          vault.previewWithdraw(amount)
        ]);

        if (maxWithdraw < amount) {
          throw new Error(`Retrait trop important. Maximum: ${ethers.formatUnits(maxWithdraw, assetDecimals)}`);
        }

        const withdrawTx = await vault.withdraw(amount, userAddress, userAddress);
        const receipt = await withdrawTx.wait();
        
        console.log("Retrait confirm√©:", receipt.hash);
        
        return {
          success: true,
          txHash: receipt.hash,
          sharesUsed: ethers.formatUnits(previewShares, 18)
        };
      },

      redeemFromVault: async (provider, signer, vaultAddress, userAddress, sharesHuman) => {
        console.log(`üîÑ Rachat de shares: ${sharesHuman} pour ${userAddress}`);
        
        if (!signer) {
          throw new Error('Signer requis pour les transactions');
        }

        const VAULT_ABI = [
          "function redeem(uint256 shares, address receiver, address owner) external returns (uint256)",
          "function previewRedeem(uint256 shares) external view returns (uint256)",
          "function maxRedeem(address owner) external view returns (uint256)"
        ];

        const vault = new ethers.Contract(vaultAddress, VAULT_ABI, signer);
        const shares = ethers.parseUnits(sharesHuman, 18);

        const [maxRedeem, previewAssets] = await Promise.all([
          vault.maxRedeem(userAddress),
          vault.previewRedeem(shares)
        ]);

        if (maxRedeem < shares) {
          throw new Error(`Rachat trop important. Maximum: ${ethers.formatUnits(maxRedeem, 18)} shares`);
        }

        const redeemTx = await vault.redeem(shares, userAddress, userAddress);
        const receipt = await redeemTx.wait();
        
        console.log("Rachat confirm√©:", receipt.hash);
        
        return {
          success: true,
          txHash: receipt.hash,
          assetsReceived: ethers.formatUnits(previewAssets, 18)
        };
      }
    };

    console.log('‚úÖ Fonctions vault charg√©es');
    
  } catch (error) {
    console.error('‚ùå Erreur chargement fonctions:', error);
    VaultFunctions = null;
  }
}

// === ENDPOINTS UTILISANT VOS VRAIES FONCTIONS ===

// üìä Endpoint: Informations du vault (VRAIE FONCTION)
app.get('/api/vault/info/:vaultAddress', async (req, res) => {
  try {
    const { vaultAddress } = req.params;
    
    if (!vaultAddress || !ethers.isAddress(vaultAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse du vault invalide'
      });
    }

    if (!provider) {
      return res.status(503).json({
        success: false,
        error: 'Provider blockchain non disponible'
      });
    }

    console.log(`üìä [REAL] R√©cup√©ration infos vault: ${vaultAddress}`);

    // Utiliser notre fonction getVaultInfo
    const vaultInfo = await VaultFunctions.getVaultInfo(provider, vaultAddress);
    
    console.log(`‚úÖ Infos vault r√©cup√©r√©es pour ${vaultAddress}`);
    
    res.json({
      success: true,
      message: 'Informations du vault r√©cup√©r√©es',
      vaultAddress,
      vaultInfo,
      source: 'real_function'
    });

  } catch (error) {
    console.error('‚ùå Erreur infos vault:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erreur lors de la r√©cup√©ration des infos du vault'
    });
  }
});

// üíº Endpoint: Portefeuille utilisateur (VRAIE FONCTION)
app.get('/api/vault/portfolio/:userAddress', async (req, res) => {
  try {
    const { userAddress } = req.params;
    
    if (!userAddress || !ethers.isAddress(userAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse utilisateur invalide'
      });
    }

    console.log(`üíº [REAL] R√©cup√©ration portefeuille: ${userAddress}`);

    // Utiliser notre fonction getUserActiveVaults
    const activeVaults = await VaultFunctions.getUserActiveVaults(provider, userAddress);
    
    console.log(`‚úÖ Portefeuille r√©cup√©r√©: ${activeVaults.length} vault(s) pour ${userAddress}`);
    
    res.json({
      success: true,
      message: `Portefeuille r√©cup√©r√©: ${activeVaults.length} vault(s) actif(s)`,
      userAddress,
      activeVaults,
      vaultCount: activeVaults.length,
      source: 'real_function'
    });

  } catch (error) {
    console.error('‚ùå Erreur portefeuille:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erreur lors de la r√©cup√©ration du portefeuille'
    });
  }
});

// üí∞ Endpoint: Soldes utilisateur (VRAIE FONCTION)
app.get('/api/vault/balances/:userAddress/:vaultAddress', async (req, res) => {
  try {
    const { userAddress, vaultAddress } = req.params;
    const { assetAddress, assetDecimals, vaultDecimals } = req.query;
    
    if (!userAddress || !ethers.isAddress(userAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse utilisateur invalide'
      });
    }
    
    if (!vaultAddress || !ethers.isAddress(vaultAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse vault invalide'
      });
    }
    
    if (!assetAddress || !assetDecimals || !vaultDecimals) {
      return res.status(400).json({
        success: false,
        error: 'Param√®tres manquants: assetAddress, assetDecimals, vaultDecimals'
      });
    }

    console.log(`üí∞ [REAL] V√©rification soldes: ${userAddress} pour vault ${vaultAddress}`);

    // Utiliser notre fonction getUserBalances
    const balances = await VaultFunctions.getUserBalances(
      provider,
      userAddress,
      vaultAddress,
      assetAddress,
      parseInt(assetDecimals),
      parseInt(vaultDecimals)
    );
    
    console.log(`‚úÖ Soldes r√©cup√©r√©s pour ${userAddress}`);
    
    res.json({
      success: true,
      message: 'Soldes r√©cup√©r√©s',
      userAddress,
      vaultAddress,
      balances,
      source: 'real_function'
    });

  } catch (error) {
    console.error('‚ùå Erreur soldes:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erreur lors de la v√©rification des soldes'
    });
  }
});

// üè¶ Endpoint: D√©poser dans un vault (VRAIE FONCTION)
app.post('/api/vault/deposit', async (req, res) => {
  try {
    const { vaultAddress, assetAddress, decimals, userAddress, amount } = req.body;
    
    // Validation des param√®tres
    if (!vaultAddress || !ethers.isAddress(vaultAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse vault invalide'
      });
    }
    
    if (!assetAddress || !ethers.isAddress(assetAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse asset invalide'
      });
    }
    
    if (!userAddress || !ethers.isAddress(userAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse utilisateur invalide'
      });
    }
    
    if (!amount || isNaN(parseFloat(amount))) {
      return res.status(400).json({
        success: false,
        error: 'Montant invalide'
      });
    }

    if (!signer) {
      return res.status(503).json({
        success: false,
        error: 'Wallet non configur√© pour les transactions'
      });
    }

    console.log(`üè¶ [REAL] D√©p√¥t dans vault: ${amount} tokens pour ${userAddress}`);

    // Pr√©parer les param√®tres pour notre fonction
    const vaultInfo = {
      vaultAddress,
      assetAddress,
      decimals: parseInt(decimals)
    };

    // Utiliser notre fonction depositToVault
    const result = await VaultFunctions.depositToVault(
      provider,
      signer,
      vaultInfo,
      userAddress,
      amount.toString()
    );
    
    console.log(`‚úÖ D√©p√¥t r√©ussi: ${result.txHash}`);
    
    res.json({
      success: true,
      message: `D√©p√¥t de ${amount} tokens r√©ussi`,
      transactionHash: result.txHash,
      expectedShares: result.expectedShares,
      vaultAddress,
      amount,
      source: 'real_function',
      result
    });

  } catch (error) {
    console.error('‚ùå Erreur d√©p√¥t vault:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erreur lors du d√©p√¥t'
    });
  }
});

// üí∞ Endpoint: Retirer d'un vault (VRAIE FONCTION)
app.post('/api/vault/withdraw', async (req, res) => {
  try {
    const { vaultAddress, assetDecimals, userAddress, amount } = req.body;
    
    // Validation des param√®tres
    if (!vaultAddress || !ethers.isAddress(vaultAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse vault invalide'
      });
    }
    
    if (!userAddress || !ethers.isAddress(userAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse utilisateur invalide'
      });
    }
    
    if (!amount || isNaN(parseFloat(amount))) {
      return res.status(400).json({
        success: false,
        error: 'Montant invalide'
      });
    }

    if (!signer) {
      return res.status(503).json({
        success: false,
        error: 'Wallet non configur√© pour les transactions'
      });
    }

    console.log(`üí∞ [REAL] Retrait du vault: ${amount} tokens pour ${userAddress}`);

    // Utiliser notre fonction withdrawFromVault
    const result = await VaultFunctions.withdrawFromVault(
      provider,
      signer,
      vaultAddress,
      parseInt(assetDecimals),
      userAddress,
      amount.toString()
    );
    
    console.log(`‚úÖ Retrait r√©ussi: ${result.txHash}`);
    
    res.json({
      success: true,
      message: `Retrait de ${amount} tokens r√©ussi`,
      transactionHash: result.txHash,
      sharesUsed: result.sharesUsed,
      vaultAddress,
      amount,
      source: 'real_function',
      result
    });

  } catch (error) {
    console.error('‚ùå Erreur retrait vault:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erreur lors du retrait'
    });
  }
});

// üîÑ Endpoint: Racheter des shares (VRAIE FONCTION)
app.post('/api/vault/redeem', async (req, res) => {
  try {
    const { vaultAddress, userAddress, shares } = req.body;
    
    // Validation des param√®tres
    if (!vaultAddress || !ethers.isAddress(vaultAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse vault invalide'
      });
    }
    
    if (!userAddress || !ethers.isAddress(userAddress)) {
      return res.status(400).json({
        success: false,
        error: 'Adresse utilisateur invalide'
      });
    }
    
    if (!shares || isNaN(parseFloat(shares))) {
      return res.status(400).json({
        success: false,
        error: 'Nombre de shares invalide'
      });
    }

    if (!signer) {
      return res.status(503).json({
        success: false,
        error: 'Wallet non configur√© pour les transactions'
      });
    }

    console.log(`üîÑ [REAL] Rachat de shares: ${shares} pour ${userAddress}`);

    // Utiliser notre fonction redeemFromVault
    const result = await VaultFunctions.redeemFromVault(
      provider,
      signer,
      vaultAddress,
      userAddress,
      shares.toString()
    );
    
    console.log(`‚úÖ Rachat r√©ussi: ${result.txHash}`);
    
    res.json({
      success: true,
      message: `Rachat de ${shares} shares r√©ussi`,
      transactionHash: result.txHash,
      assetsReceived: result.assetsReceived,
      vaultAddress,
      shares,
      source: 'real_function',
      result
    });

  } catch (error) {
    console.error('‚ùå Erreur rachat vault:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erreur lors du rachat'
    });
  }
});

// üìä Endpoint de sant√©
app.get('/health', async (req, res) => {
  try {
    let providerStatus = 'disconnected';
    let networkInfo = null;
    
    if (provider) {
      try {
        networkInfo = await provider.getNetwork();
        providerStatus = 'connected';
      } catch (error) {
        providerStatus = 'error';
      }
    }
    
    res.json({ 
      status: 'ok',
      mode: 'real_functions_js',
      timestamp: new Date().toISOString(),
      provider: {
        status: providerStatus,
        network: networkInfo ? {
          name: networkInfo.name,
          chainId: Number(networkInfo.chainId)
        } : null
      },
      signer: signer ? await signer.getAddress() : null,
      vaultFunctions: VaultFunctions ? 'loaded' : 'not_loaded',
      services: [
        'vault-deposit (real)',
        'vault-withdraw (real)', 
        'vault-redeem (real)',
        'vault-info (real)',
        'vault-portfolio (real)',
        'vault-balances (real)'
      ],
      version: '4.0.0-real-functions-js'
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      error: error.message
    });
  }
});

// Initialiser et d√©marrer le serveur
async function startServer() {
  try {
    await initializeProvider();
    await loadVaultFunctions();
    
    app.listen(PORT, () => {
      console.log('');
      console.log('üöÄ Backend Crypto API (VRAIES FONCTIONS JS) d√©marr√© !');
      console.log(`üì° URL: http://localhost:${PORT}`);
      console.log('');
      console.log('üìã Endpoints disponibles (toutes vraies fonctions):');
      console.log(`   POST /api/vault/deposit`);
      console.log(`   POST /api/vault/withdraw`);
      console.log(`   POST /api/vault/redeem`);
      console.log(`   GET  /api/vault/info/:vaultAddress`);
      console.log(`   GET  /api/vault/portfolio/:userAddress`);
      console.log(`   GET  /api/vault/balances/:userAddress/:vaultAddress`);
      console.log(`   GET  /health`);
      console.log('');
      console.log('‚úÖ Toutes les fonctions sont des vraies fonctions blockchain');
      console.log('üì± Aucune simulation - Transactions r√©elles uniquement');
      console.log('üîó Pr√™t √† recevoir des requ√™tes');
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
}

// Gestion des erreurs
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non captur√©e:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
});

startServer();

module.exports = app;
