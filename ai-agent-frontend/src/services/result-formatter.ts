/**
 * Service pour formater les r√©sultats d'actions via GPT-4o-mini
 * Rend les r√©sultats techniques plus lisibles et agr√©ables
 */

interface FormatResultRequest {
  actionType: string;
  functionResult: string;
  userMessage?: string;
}

interface FormatResultResponse {
  success: boolean;
  formattedMessage: string;
  error?: string;
}

class ResultFormatterService {
  private apiKey: string;
  private baseUrl: string = 'https://api.openai.com/v1/chat/completions';

  constructor() {
    this.apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY || '';
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è NEXT_PUBLIC_OPENAI_API_KEY non d√©finie');
    }
  }

  /**
   * Formate un r√©sultat d'action via GPT-4o-mini
   */
  async formatResult(request: FormatResultRequest): Promise<FormatResultResponse> {
    if (!this.apiKey) {
      return {
        success: false,
        formattedMessage: request.functionResult,
        error: 'Cl√© API OpenAI non configur√©e'
      };
    }

    try {
      const prompt = this.buildPrompt(request);
      
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: `Tu es un assistant sp√©cialis√© dans la pr√©sentation de r√©sultats d'op√©rations blockchain Flow. 
              Tu dois rendre les r√©sultats techniques plus lisibles, agr√©ables et compr√©hensibles pour un utilisateur final.
              
              R√®gles importantes :
              - Utilise un ton amical et professionnel
              - Ajoute des emojis appropri√©s pour rendre le message plus vivant
              - Structure l'information de mani√®re claire
              - Explique les termes techniques en langage simple
              - Si c'est un succ√®s, f√©licite l'utilisateur
              - Si c'est une erreur, sois encourageant et sugg√®re des solutions
              - Garde le message concis mais informatif
              - Utilise le fran√ßais`
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 300,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        throw new Error(`Erreur API OpenAI: ${response.status}`);
      }

      const data = await response.json();
      const formattedMessage = data.choices[0]?.message?.content || request.functionResult;

      return {
        success: true,
        formattedMessage: formattedMessage.trim()
      };

    } catch (error) {
      console.error('‚ùå Erreur lors du formatage:', error);
      return {
        success: false,
        formattedMessage: request.functionResult,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  /**
   * Construit le prompt pour GPT-4o-mini
   */
  private buildPrompt(request: FormatResultRequest): string {
    const { actionType, functionResult, userMessage } = request;

    let context = '';
    switch (actionType.toLowerCase()) {
      case 'stake':
        context = 'stake de tokens FLOW';
        break;
      case 'swap':
        context = '√©change de tokens';
        break;
      case 'vault':
        context = 'op√©ration sur un vault (d√©p√¥t, retrait, rachat)';
        break;
      case 'balance':
        context = 'v√©rification de solde';
        break;
      default:
        context = 'op√©ration blockchain';
    }

    return `Voici le r√©sultat d'une ${context} :

Type d'action : ${actionType}
Message utilisateur original : ${userMessage || 'Non sp√©cifi√©'}
R√©sultat technique : ${functionResult}

Peux-tu reformater ce r√©sultat pour qu'il soit plus agr√©able et compr√©hensible pour l'utilisateur final ?`;
  }

  /**
   * Formate rapidement un r√©sultat simple (fallback)
   */
  formatSimpleResult(actionType: string, functionResult: string): string {
    try {
      const result = JSON.parse(functionResult);
      
      if (result.success) {
        return `üéâ ${result.message || 'Op√©ration r√©ussie !'}`;
      } else {
        return `‚ùå ${result.message || 'Une erreur est survenue'}`;
      }
    } catch {
      // Si ce n'est pas du JSON, retourner tel quel
      return functionResult;
    }
  }
}

// Instance singleton
export const resultFormatter = new ResultFormatterService();

// Types export√©s
export type { FormatResultRequest, FormatResultResponse }; 